import { IActor } from '../actor/IActor';
import { IScenario } from './IScenario';
import { Player } from '../player/player';
import { Role } from '../player/role';
import { ICollisionManager } from '../collision/ICollisionManager';
import { IRoleManager } from '../role/IRoleManager';
import { ActorIdService } from './ActorIdService';
import { IScenarioDefinition } from './IScenarioDefinition';
import { ScenarioHooks } from './';
import { IScenarioComponent } from './IScenarioComponent';
import { ISpawnLocationManager } from './ISpawnLocationManager';
export declare class Scenario implements IScenario {
    name: string;
    actors: IActor[];
    gameId: string;
    configEnvActors: any[];
    configRoleActors: any[];
    actorRepository: any;
    collisionManager: ICollisionManager;
    roleManager: IRoleManager;
    spawnLocationManager: ISpawnLocationManager;
    actorIdService: ActorIdService;
    removedActorsBuffer: string[];
    events: Map<string, (scenario: Scenario, socketId: string, data: any) => void>;
    scenarioHooks: ScenarioHooks;
    components: Map<string, IScenarioComponent>;
    constructor(scenarioDef: IScenarioDefinition);
    init(players: any[], gameId: string): void;
    destroy(): void;
    addBot(index: number, spawn: any): void;
    removeBot(): void;
    getName(): string;
    setName(name: string): void;
    findActorByLabel(label: string): IActor | undefined;
    findActorById(id: string): IActor | undefined;
    update(): void;
    update2(): void;
    updateCollisions(): void;
    onRoleCommand(playerId: string, command: string, value?: any): void;
    addPlayer(player: Player): void;
    roleSelected(player: Player, roleName: string): void;
    removePlayer(playerId: string): void;
    removeActor(roleActor: IActor): void;
    addToRemovedActorList(actorId: string): void;
    getRemovedActorList(): string[];
    flushRemovedActorList(): void;
    addEnvActor(envActor: any): any;
    removeActorByLabel(label: string): void;
    addRemoteActor(remoteObj: any): any;
    addRoleActor(role: Role, configActorForRole: any): any;
    getState(): object;
    getDiffState(): object;
    setDiffState(state: any): void;
    setState(state: any): void;
    findRoleByLabel(label: string): any;
    findRoleById(roleId: string): any;
    getActors(): IActor[];
    addActor(actor: IActor): void;
    getActorRepository(): any;
    checkWinCondition(): void;
    onTeamWon(team: number): void;
    getGameId(): string;
    getSpawnLocationManager(): ISpawnLocationManager;
    respawnActorByLabel(actorLabel: string): void;
    onEvent(socketId: string, data: {
        eventName: string;
        data: any;
    }): void;
    getComponent(componentName: string): IScenarioComponent | undefined;
    addComponent(componentName: string, component: IScenarioComponent): void;
    getRoleManager(): IRoleManager;
}
