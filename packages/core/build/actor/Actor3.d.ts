import { GBox3, GRotationCoords } from '@cubic-eng/g-physics';
import { IActor } from './IActor';
import { Rectangle3 } from './Actor';
import { Shape } from '@cubic-eng/g-physics';
import { GVector3 } from '@cubic-eng/g-physics';
import { ActorComponent } from './components/ActorComponent';
import { ClientActorType } from './ClientActorType';
export declare class Actor3 implements IActor {
    [key: string]: any;
    id: string;
    name: string;
    label: string;
    hitPoints: number;
    username: string;
    shape: Shape;
    box: GBox3;
    isActive: number;
    invisible: boolean;
    wireframe: boolean;
    protected associatedActors: Map<string, IActor>;
    protected color: any;
    clientActorType: ClientActorType;
    protected previousPos: GVector3;
    assocLabel: string;
    components: Map<string, ActorComponent>;
    lastState: Object;
    constructor(box: GBox3, id?: string | null);
    setLastState(state: any): void;
    getLastState(): Object;
    setProp(prop: any, value: any): void;
    setProps(obj: any): void;
    setz(val: number): void;
    setx(val: number): void;
    sety(val: number): void;
    setr(val: GRotationCoords): void;
    setry(val: number): void;
    getComponent(componentName: string): ActorComponent | undefined;
    addComponent(componentName: string, component: ActorComponent): void;
    setUsername(username: string): void;
    getPreviousPos(): GVector3;
    setPreviousPos(vec: GVector3): void;
    setAssociatedActor(associationLabel: string, actor: IActor): void;
    getAssociatedActors(): Map<string, IActor>;
    getAssociatedActor(associationLabel: string): IActor | undefined;
    getClientActorType(): ClientActorType;
    getId(): string;
    setId(id: string): void;
    getColor(): any;
    getCoordsAndDimensions(): Rectangle3;
    getState(): {};
    setState(state: any): void;
    update(): void;
    setOrientation(orientation: number): void;
    setLabel(label: any): void;
    setPositionHeight(targetHeight: number): void;
    getLabel(): string;
    getX(): number;
    getY(): number;
    getZ(): number;
    getW(): number;
    getH(): number;
    getD(): number;
    getR(): GRotationCoords;
    setZ(z: number): void;
    isWithinMapLimits(GameOpts: any): boolean;
    restoreLastPosition(): void;
}
